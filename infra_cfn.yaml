---
AWSTemplateFormatVersion: '2010-09-09'
Description: CFN template that describes the underlying infrastructure stack that will support the 
             Fargate trading cluster. Contains a VPC with a Private and Public Subnet. Internet access
             is setup through an Internet Gateway, and a NAT Gateway routes requests from the Private Subnet 
             to the Public, and up through the Internet Gateway. 
Parameters:
  StackName:
    Type: String
    Default: TCInfra
    Description: The name of the infra stack, TC (Trading Cluster).


Resources:

  # VPC
  TCVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'false'
      Tags:
      - Key: Name
        Value: TCVPC

  # Subnets
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'TCVPC'
      Tags:
      - Key: Name
        Value: PrivateSubnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'TCVPC'
      Tags:
      - Key: Name
        Value: PublicSubnet

  # Private Route Table, Associations, and Routes
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'TCVPC'
      Tags:
      - Key: Name
        Value: PrivateRouteTable
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet'
      RouteTableId: !Ref 'PrivateRouteTable'
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: TCNatGateway
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'TCNatGateway'

  # Public Route Table, Associations, and Routes
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'TCVPC'
      Tags:
      - Key: Name
        Value: PublicRouteTable
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet'
      RouteTableId: !Ref 'PublicRouteTable'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: TCInternetGateway
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'TCInternetGateway'

  # ElasticIP
  EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachVPCandIG
    Properties:
      Domain: vpc

  # Gateways and Attachments
  TCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: TCInternetGateway
  AttachVPCandIG:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'TCVPC'
      InternetGatewayId: !Ref 'TCInternetGateway'
  TCNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId: !Ref 'PublicSubnet'
      Tags:
      - Key: Name
        Value: TCNatGateway

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  # Define an ECS Service role to enable ECS to manage the trading cluster
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          # Rules which allow ECS to attach network interfaces to instances
          # on your behalf in order for awsvpc networking mode to work right,
          # as well as service discovery and logging
          - Sid: ECSTaskManagement
            Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              - 'servicediscovery:DeregisterInstance'
              - 'servicediscovery:Get*'
              - 'servicediscovery:List*'
              - 'servicediscovery:RegisterInstance'
              - 'servicediscovery:UpdateInstanceCustomHealthStatus'
            Resource: '*'
          - Sid: ECSTags
            Effect: Allow
            Action:
              - 'ec2:CreateTags'
            Resource: 'arn:aws:ec2:*:*:network-interface/*'
          - Sid: CWLogGroupManagement
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:DescribeLogGroups'
              - 'logs:PutRetentionPolicy'
            Resource: 'arn:aws:logs:*:*:log-group:/aws/ecs/*'
          - Sid: CWLogStreamManagement
            Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:DescribeLogsStreams'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:log-group:/aws/ecs/*:log-stream:*'

  # Define an ECS task execution role to allow future tasks to download images, write to cloudwatch, etc.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  
Outputs:
  VPC:
    Description: The ID of the trading cluster VPC
    Value: !Ref 'TCVPC'
    Export:
      Name: !Sub ${StackName}:VPC
  PrivateSubnet:
    Description: The ID of private subnet for trading cluster
    Value: !Ref 'PrivateSubnet'
    Export:
      Name: !Sub ${StackName}:PrivateSubnet
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Sub ${StackName}:ClusterName
  ECSServiceRole:
    Description: Name of IAM role allowing ECS to manage cluster
    Value: !Ref 'ECSServiceRole'
    Export:
      Name: !Sub ${StackName}:ECSServiceRole
  ECSTaskRole:
    Description: Name of IAM role allowing ECS tasks to perform actions
    Value: !Ref 'ECSTaskExecutionRole'
    Export:
      Name: !Sub ${StackName}:ECSTaskExecutionRole
